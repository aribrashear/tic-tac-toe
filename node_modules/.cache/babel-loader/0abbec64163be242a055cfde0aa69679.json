{"ast":null,"code":"var _jsxFileName = \"/Users/learnacademy/Desktop/tic-tac-toe/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport \"./App.css\";\nimport Square from \"./components/Square\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const [squares, setSquares] = useState(Array(9).fill(null));\n  const [player1, setPlayer1] = useState(true);\n  const [player2, setPlayer2] = useState(false);\n\n  const determineWin = () => {\n    let wins = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]]; // /// Looping through the wins array\n    // for (let i = 0; i < wins.length; i++) {\n    //   // a, b, c --> index 0, 1, 2 inside of each wins array\n    //   const [a, b, c] = wins[i];\n    //   if (\n    //     squares[a] === wins[a] &&\n    //     squares[b] === wins[b] &&\n    //     squares[c] === wins[b]\n    //     // squares[a] &&\n    //     // squares[a] === squares[b] &&\n    //     // squares[a] === squares[c]\n    //   ) {\n    //     console.log(\"squares:\", squares[a], squares[b], squares[c])\n    //     return alert(\"You Win!\");\n    //   }\n    // }\n\n    console.log(\"You Win\");\n  };\n\n  const handleGamePlay = index => {\n    let updateBoard = [...squares];\n\n    if (player1 === true && updateBoard[index] !== \"ðŸŽƒ\" && updateBoard[index] !== \"ðŸŽ„\") {\n      updateBoard[index] = \"ðŸŽƒ\";\n      setSquares(updateBoard);\n      setPlayer2(true);\n      setPlayer1(false);\n      determineWin();\n    } else if (player2 === true && updateBoard[index] !== \"ðŸŽƒ\" && updateBoard[index] !== \"ðŸŽ„\") {\n      updateBoard[index] = \"ðŸŽ„\";\n      setSquares(updateBoard);\n      setPlayer2(false);\n      setPlayer1(true);\n      determineWin();\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Tic Tac Toe\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game_container\",\n      children: squares.map((squares, index) => {\n        return /*#__PURE__*/_jsxDEV(Square, {\n          squares: squares,\n          handleGamePlay: handleGamePlay,\n          index: index\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(App, \"iwp2GUwQCFzPBgET6YtYS+jVWsk=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","Square","App","squares","setSquares","Array","fill","player1","setPlayer1","player2","setPlayer2","determineWin","wins","console","log","handleGamePlay","index","updateBoard","map"],"sources":["/Users/learnacademy/Desktop/tic-tac-toe/src/App.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Square from \"./components/Square\";\n\nconst App = () => {\n  const [squares, setSquares] = useState(Array(9).fill(null));\n  const [player1, setPlayer1] = useState(true);\n  const [player2, setPlayer2] = useState(false);\n\n  const determineWin = () => {\n    let wins = [\n      [0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8],\n      [0, 3, 6],\n      [1, 4, 7],\n      [2, 5, 8],\n      [0, 4, 8],\n      [2, 4, 6],\n    ];\n    // /// Looping through the wins array\n    // for (let i = 0; i < wins.length; i++) {\n    //   // a, b, c --> index 0, 1, 2 inside of each wins array\n    //   const [a, b, c] = wins[i];\n    //   if (\n    //     squares[a] === wins[a] &&\n    //     squares[b] === wins[b] &&\n    //     squares[c] === wins[b]\n    //     // squares[a] &&\n    //     // squares[a] === squares[b] &&\n    //     // squares[a] === squares[c]\n    //   ) {\n    //     console.log(\"squares:\", squares[a], squares[b], squares[c])\n    //     return alert(\"You Win!\");\n    //   }\n    // }\n    console.log(\"You Win\");\n  };\n\n  const handleGamePlay = (index) => {\n    let updateBoard = [...squares];\n\n    if (\n      player1 === true &&\n      updateBoard[index] !== \"ðŸŽƒ\" &&\n      updateBoard[index] !== \"ðŸŽ„\"\n    ) {\n      updateBoard[index] = \"ðŸŽƒ\";\n      setSquares(updateBoard);\n      setPlayer2(true);\n      setPlayer1(false);\n      determineWin();\n    } else if (\n      player2 === true &&\n      updateBoard[index] !== \"ðŸŽƒ\" &&\n      updateBoard[index] !== \"ðŸŽ„\"\n    ) {\n      updateBoard[index] = \"ðŸŽ„\";\n      setSquares(updateBoard);\n      setPlayer2(false);\n      setPlayer1(true);\n      determineWin();\n    }\n  };\n\n  return (\n    <>\n      <h1>Tic Tac Toe</h1>\n      <div className=\"game_container\">\n        {squares.map((squares, index) => {\n          return (\n            <Square\n              squares={squares}\n              handleGamePlay={handleGamePlay}\n              index={index}\n              key={index}\n            />\n          );\n        })}\n      </div>\n    </>\n  );\n};\n\nexport default App;\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAO,WAAP;AACA,OAAOC,MAAP,MAAmB,qBAAnB;;;;AAEA,MAAMC,GAAG,GAAG,MAAM;EAAA;;EAChB,MAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBJ,QAAQ,CAACK,KAAK,CAAC,CAAD,CAAL,CAASC,IAAT,CAAc,IAAd,CAAD,CAAtC;EACA,MAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBR,QAAQ,CAAC,IAAD,CAAtC;EACA,MAAM,CAACS,OAAD,EAAUC,UAAV,IAAwBV,QAAQ,CAAC,KAAD,CAAtC;;EAEA,MAAMW,YAAY,GAAG,MAAM;IACzB,IAAIC,IAAI,GAAG,CACT,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CADS,EAET,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAFS,EAGT,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAHS,EAIT,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAJS,EAKT,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CALS,EAMT,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CANS,EAOT,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAPS,EAQT,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CARS,CAAX,CADyB,CAWzB;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IACAC,OAAO,CAACC,GAAR,CAAY,SAAZ;EACD,CA5BD;;EA8BA,MAAMC,cAAc,GAAIC,KAAD,IAAW;IAChC,IAAIC,WAAW,GAAG,CAAC,GAAGd,OAAJ,CAAlB;;IAEA,IACEI,OAAO,KAAK,IAAZ,IACAU,WAAW,CAACD,KAAD,CAAX,KAAuB,IADvB,IAEAC,WAAW,CAACD,KAAD,CAAX,KAAuB,IAHzB,EAIE;MACAC,WAAW,CAACD,KAAD,CAAX,GAAqB,IAArB;MACAZ,UAAU,CAACa,WAAD,CAAV;MACAP,UAAU,CAAC,IAAD,CAAV;MACAF,UAAU,CAAC,KAAD,CAAV;MACAG,YAAY;IACb,CAVD,MAUO,IACLF,OAAO,KAAK,IAAZ,IACAQ,WAAW,CAACD,KAAD,CAAX,KAAuB,IADvB,IAEAC,WAAW,CAACD,KAAD,CAAX,KAAuB,IAHlB,EAIL;MACAC,WAAW,CAACD,KAAD,CAAX,GAAqB,IAArB;MACAZ,UAAU,CAACa,WAAD,CAAV;MACAP,UAAU,CAAC,KAAD,CAAV;MACAF,UAAU,CAAC,IAAD,CAAV;MACAG,YAAY;IACb;EACF,CAxBD;;EA0BA,oBACE;IAAA,wBACE;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QADF,eAEE;MAAK,SAAS,EAAC,gBAAf;MAAA,UACGR,OAAO,CAACe,GAAR,CAAY,CAACf,OAAD,EAAUa,KAAV,KAAoB;QAC/B,oBACE,QAAC,MAAD;UACE,OAAO,EAAEb,OADX;UAEE,cAAc,EAAEY,cAFlB;UAGE,KAAK,EAAEC;QAHT,GAIOA,KAJP;UAAA;UAAA;UAAA;QAAA,QADF;MAQD,CATA;IADH;MAAA;MAAA;MAAA;IAAA,QAFF;EAAA,gBADF;AAiBD,CA9ED;;GAAMd,G;;KAAAA,G;AAgFN,eAAeA,GAAf"},"metadata":{},"sourceType":"module"}