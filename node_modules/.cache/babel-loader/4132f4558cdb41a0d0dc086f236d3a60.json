{"ast":null,"code":"var _jsxFileName = \"/Users/learnacademy/Desktop/tic-tac-toe/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport \"./App.css\";\nimport Square from \"./components/Square\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const [squares, setSquares] = useState(Array(9).fill(null));\n  const [player1, setPlayer1] = useState(true);\n  const [player2, setPlayer2] = useState(false); /// Setting up empty array to store the indexes of the clicked squares\n\n  const [player1moves, setPlayer1Moves] = useState([]);\n  const [player2moves, setPlayer2Moves] = useState([]); /// All possible win conditions, stored inside arrays\n\n  let wins = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n\n  const handleWin = () => {\n    for (let i = 0; i < wins.length; i++) {\n      const [a, b, c] = wins[i];\n\n      if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n        console.log(\"You Win\");\n      }\n    }\n  };\n};\n\n_s(App, \"DgHqd5fCVaP8HU+TIttI5he0NpM=\");\n\n_c = App;\n\nconst handleGamePlay = index => {\n  let updateBoard = [...squares];\n\n  if (player1 === true && updateBoard[index] !== \"ðŸŽƒ\" && updateBoard[index] !== \"ðŸŽ„\") {\n    updateBoard[index] = \"ðŸŽƒ\";\n    setSquares(updateBoard);\n    setPlayer1Moves(player1moves.concat(index));\n    setPlayer2(true);\n    setPlayer1(false); // determineWin();\n\n    console.log(\"ClickedSquares:\", player1moves);\n  } else if (player2 === true && updateBoard[index] !== \"ðŸŽƒ\" && updateBoard[index] !== \"ðŸŽ„\") {\n    updateBoard[index] = \"ðŸŽ„\";\n    setSquares(updateBoard);\n    setPlayer2Moves(player2moves.concat(index));\n    setPlayer2(false);\n    setPlayer1(true); // determineWin();\n\n    console.log(\"ClickedSquares:\", player2moves);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Tic Tac Toe\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game_container\",\n      children: squares.map((squares, index) => {\n        return /*#__PURE__*/_jsxDEV(Square, {\n          squares: squares,\n          handleGamePlay: handleGamePlay,\n          index: index\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","Square","App","squares","setSquares","Array","fill","player1","setPlayer1","player2","setPlayer2","player1moves","setPlayer1Moves","player2moves","setPlayer2Moves","wins","handleWin","i","length","a","b","c","console","log","handleGamePlay","index","updateBoard","concat","map"],"sources":["/Users/learnacademy/Desktop/tic-tac-toe/src/App.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Square from \"./components/Square\";\n\nconst App = () => {\n  const [squares, setSquares] = useState(Array(9).fill(null));\n  const [player1, setPlayer1] = useState(true);\n  const [player2, setPlayer2] = useState(false);\n\n  /// Setting up empty array to store the indexes of the clicked squares\n  const [player1moves, setPlayer1Moves] = useState([]);\n  const [player2moves, setPlayer2Moves] = useState([]);\n\n  /// All possible win conditions, stored inside arrays\n  let wins = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  const handleWin = () => {\n    for (let i = 0; i < wins.length; i++) {\n      const [a, b, c] = wins[i];\n      if (\n        squares[a] &&\n        squares[a] === squares[b] &&\n        squares[a] === squares[c]\n      ) {\n        console.log(\"You Win\");\n      }\n    }\n  };\n};\n\nconst handleGamePlay = (index) => {\n  let updateBoard = [...squares];\n\n  if (\n    player1 === true &&\n    updateBoard[index] !== \"ðŸŽƒ\" &&\n    updateBoard[index] !== \"ðŸŽ„\"\n  ) {\n    updateBoard[index] = \"ðŸŽƒ\";\n    setSquares(updateBoard);\n    setPlayer1Moves(player1moves.concat(index));\n    setPlayer2(true);\n    setPlayer1(false);\n    // determineWin();\n    console.log(\"ClickedSquares:\", player1moves);\n  } else if (\n    player2 === true &&\n    updateBoard[index] !== \"ðŸŽƒ\" &&\n    updateBoard[index] !== \"ðŸŽ„\"\n  ) {\n    updateBoard[index] = \"ðŸŽ„\";\n    setSquares(updateBoard);\n    setPlayer2Moves(player2moves.concat(index));\n    setPlayer2(false);\n    setPlayer1(true);\n    // determineWin();\n    console.log(\"ClickedSquares:\", player2moves);\n  }\n\n  return (\n    <>\n      <h1>Tic Tac Toe</h1>\n      <div className=\"game_container\">\n        {squares.map((squares, index) => {\n          return (\n            <Square\n              squares={squares}\n              handleGamePlay={handleGamePlay}\n              index={index}\n              key={index}\n            />\n          );\n        })}\n      </div>\n    </>\n  );\n};\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}